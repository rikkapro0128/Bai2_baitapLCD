

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 02 18:35:41 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289                           
   290                           	psect	strings
   291  0003                     __pstrings:
   292  0003                     stringtab:
   293  0003                     __stringtab:
   294  0003                     stringcode:	
   295                           ;	String table - string pointers are 1 byte each
   296                           
   297  0003                     stringdir:
   298  0003  3000               	movlw	high stringdir
   299  0004  008A               	movwf	10
   300  0005  0804               	movf	4,w
   301  0006  0A84               	incf	4,f
   302  0007  0782               	addwf	2,f
   303  0008                     __stringbase:
   304  0008  3400               	retlw	0
   305  0009                     __end_of__stringtab:
   306  0009                     main@special_name_born_live:
   307  0009  3404               	retlw	4
   308  000A  3400               	retlw	0
   309  000B  3404               	retlw	4
   310  000C  3404               	retlw	4
   311  000D  3404               	retlw	4
   312  000E  3400               	retlw	0
   313  000F  3404               	retlw	4
   314  0010  3400               	retlw	0
   315  0011  3402               	retlw	2
   316  0012  3409               	retlw	9
   317  0013  3414               	retlw	20
   318  0014  3408               	retlw	8
   319  0015  3414               	retlw	20
   320  0016  3418               	retlw	24
   321  0017  340C               	retlw	12
   322  0018  3400               	retlw	0
   323  0019  3408               	retlw	8
   324  001A  3404               	retlw	4
   325  001B  3400               	retlw	0
   326  001C  340C               	retlw	12
   327  001D  3412               	retlw	18
   328  001E  3412               	retlw	18
   329  001F  340F               	retlw	15
   330  0020  3400               	retlw	0
   331  0021  3406               	retlw	6
   332  0022  3401               	retlw	1
   333  0023  340E               	retlw	14
   334  0024  3411               	retlw	17
   335  0025  3411               	retlw	17
   336  0026  3411               	retlw	17
   337  0027  340E               	retlw	14
   338  0028  3400               	retlw	0
   339  0029  340E               	retlw	14
   340  002A  3409               	retlw	9
   341  002B  3409               	retlw	9
   342  002C  341D               	retlw	29
   343  002D  3409               	retlw	9
   344  002E  3409               	retlw	9
   345  002F  340E               	retlw	14
   346  0030  3400               	retlw	0
   347  0031  3402               	retlw	2
   348  0032  340D               	retlw	13
   349  0033  3412               	retlw	18
   350  0034  340C               	retlw	12
   351  0035  3412               	retlw	18
   352  0036  3412               	retlw	18
   353  0037  340C               	retlw	12
   354  0038  3400               	retlw	0
   355  0039  3499               	retlw	153
   356  003A                     __end_ofmain@special_name_born_live:
   357  003A                     main@special_HKTT_class:
   358  003A  340E               	retlw	14
   359  003B  3409               	retlw	9
   360  003C  3409               	retlw	9
   361  003D  341D               	retlw	29
   362  003E  3409               	retlw	9
   363  003F  3409               	retlw	9
   364  0040  340E               	retlw	14
   365  0041  3400               	retlw	0
   366  0042  3408               	retlw	8
   367  0043  3404               	retlw	4
   368  0044  3400               	retlw	0
   369  0045  340C               	retlw	12
   370  0046  3412               	retlw	18
   371  0047  3412               	retlw	18
   372  0048  340C               	retlw	12
   373  0049  3400               	retlw	0
   374  004A  3401               	retlw	1
   375  004B  340A               	retlw	10
   376  004C  3414               	retlw	20
   377  004D  3400               	retlw	0
   378  004E  341C               	retlw	28
   379  004F  3414               	retlw	20
   380  0050  341F               	retlw	31
   381  0051  3400               	retlw	0
   382  0052  3401               	retlw	1
   383  0053  340D               	retlw	13
   384  0054  3405               	retlw	5
   385  0055  341C               	retlw	28
   386  0056  3414               	retlw	20
   387  0057  3414               	retlw	20
   388  0058  341C               	retlw	28
   389  0059  3400               	retlw	0
   390  005A  3499               	retlw	153
   391  005B                     __end_ofmain@special_HKTT_class:
   392  005B                     main@your_live:
   393  005B  344E               	retlw	78
   394  005C  3403               	retlw	3
   395  005D  3469               	retlw	105
   396  005E  3453               	retlw	83
   397  005F  3469               	retlw	105
   398  0060  346E               	retlw	110
   399  0061  3468               	retlw	104
   400  0062  343A               	retlw	58
   401  0063  3404               	retlw	4
   402  0064  3405               	retlw	5
   403  0065  346E               	retlw	110
   404  0066  3467               	retlw	103
   405  0067  3420               	retlw	32
   406  0068  344E               	retlw	78
   407  0069  3461               	retlw	97
   408  006A  3469               	retlw	105
   409  006B  340A               	retlw	10
   410  006C                     __end_ofmain@your_live:
   411  006C                     main@your_born:
   412  006C  344E               	retlw	78
   413  006D  3467               	retlw	103
   414  006E  3402               	retlw	2
   415  006F  3479               	retlw	121
   416  0070  3453               	retlw	83
   417  0071  3469               	retlw	105
   418  0072  346E               	retlw	110
   419  0073  3468               	retlw	104
   420  0074  343A               	retlw	58
   421  0075  3431               	retlw	49
   422  0076  3430               	retlw	48
   423  0077  342F               	retlw	47
   424  0078  3432               	retlw	50
   425  0079  3430               	retlw	48
   426  007A  3430               	retlw	48
   427  007B  3431               	retlw	49
   428  007C  340A               	retlw	10
   429  007D                     __end_ofmain@your_born:
   430  007D                     main@your_name:
   431  007D  3454               	retlw	84
   432  007E  3472               	retlw	114
   433  007F  3400               	retlw	0
   434  0080  346E               	retlw	110
   435  0081  3468               	retlw	104
   436  0082  3420               	retlw	32
   437  0083  344B               	retlw	75
   438  0084  3469               	retlw	105
   439  0085  3401               	retlw	1
   440  0086  3475               	retlw	117
   441  0087  3420               	retlw	32
   442  0088  344F               	retlw	79
   443  0089  3461               	retlw	97
   444  008A  346E               	retlw	110
   445  008B  3468               	retlw	104
   446  008C  340A               	retlw	10
   447  008D                     __end_ofmain@your_name:
   448  008D                     main@MSSV:
   449  008D  344D               	retlw	77
   450  008E  3453               	retlw	83
   451  008F  3453               	retlw	83
   452  0090  3456               	retlw	86
   453  0091  343A               	retlw	58
   454  0092  3431               	retlw	49
   455  0093  3439               	retlw	57
   456  0094  3434               	retlw	52
   457  0095  3437               	retlw	55
   458  0096  3431               	retlw	49
   459  0097  3433               	retlw	51
   460  0098  3430               	retlw	48
   461  0099  3431               	retlw	49
   462  009A  340A               	retlw	10
   463  009B  3400               	retlw	0
   464  009C                     __end_ofmain@MSSV:
   465  009C                     main@class:
   466  009C  344C               	retlw	76
   467  009D  3403               	retlw	3
   468  009E  3470               	retlw	112
   469  009F  343A               	retlw	58
   470  00A0  3400               	retlw	0
   471  00A1  3448               	retlw	72
   472  00A2  3456               	retlw	86
   473  00A3  3454               	retlw	84
   474  00A4  3431               	retlw	49
   475  00A5  3435               	retlw	53
   476  00A6  3441               	retlw	65
   477  00A7  340A               	retlw	10
   478  00A8                     __end_ofmain@class:
   479  00A8                     main@HKTT:
   480  00A8  3448               	retlw	72
   481  00A9  344B               	retlw	75
   482  00AA  3454               	retlw	84
   483  00AB  3454               	retlw	84
   484  00AC  343A               	retlw	58
   485  00AD  3447               	retlw	71
   486  00AE  3401               	retlw	1
   487  00AF  3420               	retlw	32
   488  00B0  3456               	retlw	86
   489  00B1  3402               	retlw	2
   490  00B2  3470               	retlw	112
   491  00B3  340A               	retlw	10
   492  00B4                     __end_ofmain@HKTT:
   493  0044                     _RD4	set	68
   494  0045                     _RD5	set	69
   495  0046                     _RD6	set	70
   496  0047                     _RD7	set	71
   497  0043                     _RD3	set	67
   498  0041                     _RD1	set	65
   499  0042                     _RD2	set	66
   500  0442                     _TRISD2	set	1090
   501  0441                     _TRISD1	set	1089
   502  0443                     _TRISD3	set	1091
   503  0447                     _TRISD7	set	1095
   504  0446                     _TRISD6	set	1094
   505  0445                     _TRISD5	set	1093
   506  0444                     _TRISD4	set	1092
   507                           
   508                           	psect	cinit
   509  07FC                     start_initialization:	
   510                           ; #config settings
   511                           
   512  07FC                     __initialization:
   513  07FC                     end_of_initialization:	
   514                           ;End of C runtime variable initialization code
   515                           
   516  07FC                     __end_of__initialization:
   517  07FC  0183               	clrf	3
   518  07FD  120A  118A  2E7A   	ljmp	_main	;jump to C main() function
   519                           
   520                           	psect	cstackCOMMON
   521  0070                     __pcstackCOMMON:
   522  0070                     ?_lcd_busy:
   523  0070                     ??_lcd_busy:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_lcd_putc:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_lcd_init:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_addCharSpecial:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_main:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_lcd_put_nibble:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ??_lcd_put_nibble:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_getLengthArr:	
   545                           ; 1 bytes @ 0x0
   546                           
   547                           
   548                           ; 2 bytes @ 0x0
   549  0070                     	ds	1
   550  0071                     lcd_busy@busy:
   551  0071                     lcd_put_nibble@b:	
   552                           ; 1 bytes @ 0x1
   553                           
   554                           
   555                           ; 1 bytes @ 0x1
   556  0071                     	ds	1
   557  0072                     ??_getLengthArr:
   558  0072                     getLengthArr@character:	
   559                           ; 1 bytes @ 0x2
   560                           
   561  0072                     lcd_put_nibble@temp:	
   562                           ; 1 bytes @ 0x2
   563                           
   564                           
   565                           ; 1 bytes @ 0x2
   566  0072                     	ds	1
   567  0073                     ?_lcd_put_byte:
   568  0073                     lcd_put_byte@b:	
   569                           ; 1 bytes @ 0x3
   570                           
   571  0073                     getLengthArr@i:	
   572                           ; 1 bytes @ 0x3
   573                           
   574                           
   575                           ; 2 bytes @ 0x3
   576  0073                     	ds	1
   577  0074                     ??_lcd_put_byte:
   578                           
   579                           ; 1 bytes @ 0x4
   580  0074                     	ds	1
   581  0075                     lcd_put_byte@rs:
   582                           
   583                           ; 1 bytes @ 0x5
   584  0075                     	ds	1
   585  0076                     ?_lcd_gotoxy:
   586  0076                     ??_lcd_init:	
   587                           ; 1 bytes @ 0x6
   588                           
   589  0076                     ??_addCharSpecial:	
   590                           ; 1 bytes @ 0x6
   591                           
   592  0076                     lcd_gotoxy@row:	
   593                           ; 1 bytes @ 0x6
   594                           
   595                           
   596                           ; 1 bytes @ 0x6
   597  0076                     	ds	1
   598  0077                     ??_lcd_gotoxy:
   599  0077                     addCharSpecial@i:	
   600                           ; 1 bytes @ 0x7
   601                           
   602                           
   603                           ; 2 bytes @ 0x7
   604  0077                     	ds	1
   605  0078                     lcd_gotoxy@col:
   606                           
   607                           ; 1 bytes @ 0x8
   608  0078                     	ds	1
   609  0079                     addCharSpecial@character:
   610  0079                     lcd_gotoxy@address:	
   611                           ; 1 bytes @ 0x9
   612                           
   613                           
   614                           ; 1 bytes @ 0x9
   615  0079                     	ds	1
   616  007A                     ??_lcd_putc:
   617                           
   618                           ; 1 bytes @ 0xA
   619  007A                     	ds	2
   620  007C                     lcd_putc@c:
   621                           
   622                           ; 1 bytes @ 0xC
   623  007C                     	ds	1
   624  007D                     ?_showContent:
   625  007D                     showContent@character_second:	
   626                           ; 1 bytes @ 0xD
   627                           
   628                           
   629                           ; 1 bytes @ 0xD
   630  007D                     	ds	1
   631  007E                     ??_showContent:
   632                           
   633                           	psect	cstackBANK0
   634  0020                     __pcstackBANK0:	
   635                           ; 1 bytes @ 0xE
   636                           
   637  0020                     showContent@length_1:
   638                           
   639                           ; 2 bytes @ 0x0
   640  0020                     	ds	2
   641  0022                     showContent@length_2:
   642                           
   643                           ; 2 bytes @ 0x2
   644  0022                     	ds	2
   645  0024                     showContent@character_firt:
   646                           
   647                           ; 1 bytes @ 0x4
   648  0024                     	ds	1
   649  0025                     showContent@i:
   650                           
   651                           ; 2 bytes @ 0x5
   652  0025                     	ds	2
   653  0027                     ??_main:
   654                           
   655                           ; 1 bytes @ 0x7
   656  0027                     	ds	3
   657  002A                     main@length:
   658                           
   659                           ; 2 bytes @ 0xA
   660  002A                     	ds	2
   661                           
   662                           	psect	maintext
   663  067A                     __pmaintext:	
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 67 in file "newmain.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  length          2   10[BANK0 ] unsigned int 
   674 ;;  i               2    0        unsigned int 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : B00/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       2       0       0       0
   686 ;;      Temps:          0       3       0       0       0
   687 ;;      Totals:         0       5       0       0       0
   688 ;;Total ram usage:        5 bytes
   689 ;; Hardware stack levels required when called: 5
   690 ;; This function calls:
   691 ;;		_addCharSpecial
   692 ;;		_lcd_init
   693 ;;		_showContent
   694 ;; This function is called by:
   695 ;;		Startup code after reset
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           
   700                           ;psect for function _main
   701  067A                     _main:
   702  067A                     l1248:	
   703                           ;incstack = 0
   704                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   705                           
   706  067A  1283               	bcf	3,5	;RP0=0, select bank0
   707  067B  1303               	bcf	3,6	;RP1=0, select bank0
   708  067C  01AA               	clrf	main@length
   709  067D  01AB               	clrf	main@length+1
   710  067E                     l1250:
   711                           
   712                           ;newmain.c: 93:     lcd_init();
   713  067E  120A  118A  2759  120A  118A  	fcall	_lcd_init
   714  0683                     l1252:
   715                           
   716                           ;newmain.c: 94:     addCharSpecial(special_name_born_live);
   717  0683  3001               	movlw	(low ((main@special_name_born_live-__stringbase)| (0+32768)))& (0+255)
   718  0684  120A  118A  25D7  120A  118A  	fcall	_addCharSpecial
   719  0689                     l1254:
   720                           
   721                           ;newmain.c: 95:     showContent(your_name, MSSV);
   722  0689  3085               	movlw	(low ((main@MSSV-__stringbase)| (0+32768)))& (0+255)
   723  068A  1283               	bcf	3,5	;RP0=0, select bank0
   724  068B  1303               	bcf	3,6	;RP1=0, select bank0
   725  068C  00A7               	movwf	??_main
   726  068D  0827               	movf	??_main,w
   727  068E  00FD               	movwf	showContent@character_second
   728  068F  3075               	movlw	(low ((main@your_name-__stringbase)| (0+32768)))& (0+255)
   729  0690  120A  118A  26E0  120A  118A  	fcall	_showContent
   730  0695                     l1256:
   731                           
   732                           ;newmain.c: 96:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   733  0695  300B               	movlw	11
   734  0696  1283               	bcf	3,5	;RP0=0, select bank0
   735  0697  1303               	bcf	3,6	;RP1=0, select bank0
   736  0698  00A9               	movwf	??_main+2
   737  0699  3026               	movlw	38
   738  069A  00A8               	movwf	??_main+1
   739  069B  305D               	movlw	93
   740  069C  00A7               	movwf	??_main
   741  069D                     u707:
   742  069D  0BA7               	decfsz	??_main,f
   743  069E  2E9D               	goto	u707
   744  069F  0BA8               	decfsz	??_main+1,f
   745  06A0  2E9D               	goto	u707
   746  06A1  0BA9               	decfsz	??_main+2,f
   747  06A2  2E9D               	goto	u707
   748  06A3                     l1258:
   749                           
   750                           ;newmain.c: 97:     showContent(your_born, your_live);
   751  06A3  3053               	movlw	(low ((main@your_live-__stringbase)| (0+32768)))& (0+255)
   752  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   753  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   754  06A6  00A7               	movwf	??_main
   755  06A7  0827               	movf	??_main,w
   756  06A8  00FD               	movwf	showContent@character_second
   757  06A9  3064               	movlw	(low ((main@your_born-__stringbase)| (0+32768)))& (0+255)
   758  06AA  120A  118A  26E0  120A  118A  	fcall	_showContent
   759  06AF                     l1260:
   760                           
   761                           ;newmain.c: 98:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   762  06AF  300B               	movlw	11
   763  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   764  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   765  06B2  00A9               	movwf	??_main+2
   766  06B3  3026               	movlw	38
   767  06B4  00A8               	movwf	??_main+1
   768  06B5  305D               	movlw	93
   769  06B6  00A7               	movwf	??_main
   770  06B7                     u717:
   771  06B7  0BA7               	decfsz	??_main,f
   772  06B8  2EB7               	goto	u717
   773  06B9  0BA8               	decfsz	??_main+1,f
   774  06BA  2EB7               	goto	u717
   775  06BB  0BA9               	decfsz	??_main+2,f
   776  06BC  2EB7               	goto	u717
   777  06BD                     l1262:
   778                           
   779                           ;newmain.c: 99:     addCharSpecial(special_HKTT_class);
   780  06BD  3032               	movlw	(low ((main@special_HKTT_class-__stringbase)| (0+32768)))& (0+255)
   781  06BE  120A  118A  25D7  120A  118A  	fcall	_addCharSpecial
   782  06C3                     l1264:
   783                           
   784                           ;newmain.c: 100:     showContent(HKTT, class);
   785  06C3  3094               	movlw	(low ((main@class-__stringbase)| (0+32768)))& (0+255)
   786  06C4  1283               	bcf	3,5	;RP0=0, select bank0
   787  06C5  1303               	bcf	3,6	;RP1=0, select bank0
   788  06C6  00A7               	movwf	??_main
   789  06C7  0827               	movf	??_main,w
   790  06C8  00FD               	movwf	showContent@character_second
   791  06C9  30A0               	movlw	(low ((main@HKTT-__stringbase)| (0+32768)))& (0+255)
   792  06CA  120A  118A  26E0  120A  118A  	fcall	_showContent
   793  06CF                     l1266:
   794                           
   795                           ;newmain.c: 101:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   796  06CF  300B               	movlw	11
   797  06D0  1283               	bcf	3,5	;RP0=0, select bank0
   798  06D1  1303               	bcf	3,6	;RP1=0, select bank0
   799  06D2  00A9               	movwf	??_main+2
   800  06D3  3026               	movlw	38
   801  06D4  00A8               	movwf	??_main+1
   802  06D5  305D               	movlw	93
   803  06D6  00A7               	movwf	??_main
   804  06D7                     u727:
   805  06D7  0BA7               	decfsz	??_main,f
   806  06D8  2ED7               	goto	u727
   807  06D9  0BA8               	decfsz	??_main+1,f
   808  06DA  2ED7               	goto	u727
   809  06DB  0BA9               	decfsz	??_main+2,f
   810  06DC  2ED7               	goto	u727
   811  06DD                     l61:
   812  06DD  120A  118A  2800   	ljmp	start
   813  06E0                     __end_of_main:
   814                           
   815                           	psect	text1
   816  06E0                     __ptext1:	
   817 ;; *************** function _showContent *****************
   818 ;; Defined at:
   819 ;;		line 52 in file "newmain.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  character_fi    1    wreg     PTR unsigned char 
   822 ;;		 -> main@HKTT(12), main@your_born(17), main@your_name(16), 
   823 ;;  character_se    1   13[COMMON] PTR unsigned char 
   824 ;;		 -> main@class(12), main@your_live(17), main@MSSV(15), 
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  character_fi    1    4[BANK0 ] PTR unsigned char 
   827 ;;		 -> main@HKTT(12), main@your_born(17), main@your_name(16), 
   828 ;;  i               2    5[BANK0 ] unsigned int 
   829 ;;  length_2        2    2[BANK0 ] unsigned int 
   830 ;;  length_1        2    0[BANK0 ] unsigned int 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         1       0       0       0       0
   841 ;;      Locals:         0       7       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         1       7       0       0       0
   844 ;;Total ram usage:        8 bytes
   845 ;; Hardware stack levels used: 1
   846 ;; Hardware stack levels required when called: 4
   847 ;; This function calls:
   848 ;;		_getLengthArr
   849 ;;		_lcd_gotoxy
   850 ;;		_lcd_putc
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           
   857                           ;psect for function _showContent
   858  06E0                     _showContent:
   859                           
   860                           ;incstack = 0
   861                           ; Regs used in _showContent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   862                           ;showContent@character_firt stored from wreg
   863  06E0  1283               	bcf	3,5	;RP0=0, select bank0
   864  06E1  1303               	bcf	3,6	;RP1=0, select bank0
   865  06E2  00A4               	movwf	showContent@character_firt
   866  06E3                     l1182:
   867                           
   868                           ;newmain.c: 53:     unsigned int i;;newmain.c: 54:     unsigned int length_1 = getLength
      +                          Arr(character_firt);
   869  06E3  0824               	movf	showContent@character_firt,w
   870  06E4  120A  118A  24E7  120A  118A  	fcall	_getLengthArr
   871  06E9  0871               	movf	?_getLengthArr+1,w
   872  06EA  1283               	bcf	3,5	;RP0=0, select bank0
   873  06EB  1303               	bcf	3,6	;RP1=0, select bank0
   874  06EC  00A1               	movwf	showContent@length_1+1
   875  06ED  0870               	movf	?_getLengthArr,w
   876  06EE  00A0               	movwf	showContent@length_1
   877                           
   878                           ;newmain.c: 55:     lcd_putc('\f');
   879  06EF  300C               	movlw	12
   880  06F0  120A  118A  261E  120A  118A  	fcall	_lcd_putc
   881  06F5                     l1184:
   882                           
   883                           ;newmain.c: 56:     lcd_gotoxy(0, 0);
   884  06F5  01F6               	clrf	lcd_gotoxy@row
   885  06F6  3000               	movlw	0
   886  06F7  120A  118A  2504  120A  118A  	fcall	_lcd_gotoxy
   887  06FC                     l1186:
   888                           
   889                           ;newmain.c: 57:     for(i = 0; i < length_1; i++) {
   890  06FC  1283               	bcf	3,5	;RP0=0, select bank0
   891  06FD  1303               	bcf	3,6	;RP1=0, select bank0
   892  06FE  01A5               	clrf	showContent@i
   893  06FF  01A6               	clrf	showContent@i+1
   894  0700  2F16               	goto	l1192
   895  0701                     l1188:
   896                           
   897                           ;newmain.c: 58:         lcd_putc(character_firt[i]);
   898  0701  0825               	movf	showContent@i,w
   899  0702  0724               	addwf	showContent@character_firt,w
   900  0703  0084               	movwf	4
   901  0704  120A  118A  2003  120A  118A  	fcall	stringdir
   902  0709  120A  118A  261E  120A  118A  	fcall	_lcd_putc
   903  070E                     l1190:
   904                           
   905                           ;newmain.c: 59:     }
   906  070E  3001               	movlw	1
   907  070F  1283               	bcf	3,5	;RP0=0, select bank0
   908  0710  1303               	bcf	3,6	;RP1=0, select bank0
   909  0711  07A5               	addwf	showContent@i,f
   910  0712  1803               	skipnc
   911  0713  0AA6               	incf	showContent@i+1,f
   912  0714  3000               	movlw	0
   913  0715  07A6               	addwf	showContent@i+1,f
   914  0716                     l1192:
   915  0716  0821               	movf	showContent@length_1+1,w
   916  0717  0226               	subwf	showContent@i+1,w
   917  0718  1D03               	skipz
   918  0719  2F1C               	goto	u595
   919  071A  0820               	movf	showContent@length_1,w
   920  071B  0225               	subwf	showContent@i,w
   921  071C                     u595:
   922  071C  1C03               	skipc
   923  071D  2F1F               	goto	u591
   924  071E  2F20               	goto	u590
   925  071F                     u591:
   926  071F  2F01               	goto	l1188
   927  0720                     u590:
   928  0720                     l1194:
   929                           
   930                           ;newmain.c: 60:     unsigned int length_2 = getLengthArr(character_second);
   931  0720  087D               	movf	showContent@character_second,w
   932  0721  120A  118A  24E7  120A  118A  	fcall	_getLengthArr
   933  0726  0871               	movf	?_getLengthArr+1,w
   934  0727  1283               	bcf	3,5	;RP0=0, select bank0
   935  0728  1303               	bcf	3,6	;RP1=0, select bank0
   936  0729  00A3               	movwf	showContent@length_2+1
   937  072A  0870               	movf	?_getLengthArr,w
   938  072B  00A2               	movwf	showContent@length_2
   939  072C                     l1196:
   940                           
   941                           ;newmain.c: 61:     lcd_gotoxy(0, 1);
   942  072C  01F6               	clrf	lcd_gotoxy@row
   943  072D  0AF6               	incf	lcd_gotoxy@row,f
   944  072E  3000               	movlw	0
   945  072F  120A  118A  2504  120A  118A  	fcall	_lcd_gotoxy
   946  0734                     l1198:
   947                           
   948                           ;newmain.c: 62:     for(i = 0; i < length_2; i++) {
   949  0734  1283               	bcf	3,5	;RP0=0, select bank0
   950  0735  1303               	bcf	3,6	;RP1=0, select bank0
   951  0736  01A5               	clrf	showContent@i
   952  0737  01A6               	clrf	showContent@i+1
   953  0738  2F4E               	goto	l1204
   954  0739                     l1200:
   955                           
   956                           ;newmain.c: 63:         lcd_putc(character_second[i]);
   957  0739  0825               	movf	showContent@i,w
   958  073A  077D               	addwf	showContent@character_second,w
   959  073B  0084               	movwf	4
   960  073C  120A  118A  2003  120A  118A  	fcall	stringdir
   961  0741  120A  118A  261E  120A  118A  	fcall	_lcd_putc
   962  0746                     l1202:
   963                           
   964                           ;newmain.c: 64:     }
   965  0746  3001               	movlw	1
   966  0747  1283               	bcf	3,5	;RP0=0, select bank0
   967  0748  1303               	bcf	3,6	;RP1=0, select bank0
   968  0749  07A5               	addwf	showContent@i,f
   969  074A  1803               	skipnc
   970  074B  0AA6               	incf	showContent@i+1,f
   971  074C  3000               	movlw	0
   972  074D  07A6               	addwf	showContent@i+1,f
   973  074E                     l1204:
   974  074E  0823               	movf	showContent@length_2+1,w
   975  074F  0226               	subwf	showContent@i+1,w
   976  0750  1D03               	skipz
   977  0751  2F54               	goto	u605
   978  0752  0822               	movf	showContent@length_2,w
   979  0753  0225               	subwf	showContent@i,w
   980  0754                     u605:
   981  0754  1C03               	skipc
   982  0755  2F57               	goto	u601
   983  0756  2F58               	goto	u600
   984  0757                     u601:
   985  0757  2F39               	goto	l1200
   986  0758                     u600:
   987  0758                     l40:
   988  0758  0008               	return
   989  0759                     __end_of_showContent:
   990                           
   991                           	psect	text2
   992  061E                     __ptext2:	
   993 ;; *************** function _lcd_putc *****************
   994 ;; Defined at:
   995 ;;		line 190 in file "lcd.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  c               1    wreg     unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  c               1   12[COMMON] unsigned char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0       0       0       0       0
  1010 ;;      Locals:         1       0       0       0       0
  1011 ;;      Temps:          2       0       0       0       0
  1012 ;;      Totals:         3       0       0       0       0
  1013 ;;Total ram usage:        3 bytes
  1014 ;; Hardware stack levels used: 1
  1015 ;; Hardware stack levels required when called: 3
  1016 ;; This function calls:
  1017 ;;		_lcd_busy
  1018 ;;		_lcd_gotoxy
  1019 ;;		_lcd_put_byte
  1020 ;; This function is called by:
  1021 ;;		_showContent
  1022 ;;		_lcd_puts
  1023 ;;		_lcd_String_Delay
  1024 ;;		_putch
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           
  1029                           ;psect for function _lcd_putc
  1030  061E                     _lcd_putc:
  1031                           
  1032                           ;incstack = 0
  1033                           ; Regs used in _lcd_putc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1034                           ;lcd_putc@c stored from wreg
  1035  061E  00FC               	movwf	lcd_putc@c
  1036  061F                     l1146:
  1037                           
  1038                           ;lcd.c: 190: void lcd_putc(char c);lcd.c: 191: {;lcd.c: 195:  switch(c)
  1039  061F  2E66               	goto	l1162
  1040  0620                     l1148:
  1041                           
  1042                           ;lcd.c: 198:    lcd_put_byte(0,1);
  1043  0620  01F3               	clrf	lcd_put_byte@b
  1044  0621  0AF3               	incf	lcd_put_byte@b,f
  1045  0622  3000               	movlw	0
  1046  0623  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1047  0628                     l1150:	
  1048                           ;lcd.c: 199:    while(lcd_busy());
  1049                           
  1050  0628  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1051  062D  3A00               	xorlw	0
  1052  062E  1D03               	skipz
  1053  062F  2E31               	goto	u531
  1054  0630  2E32               	goto	u530
  1055  0631                     u531:
  1056  0631  2E28               	goto	l1150
  1057  0632                     u530:
  1058  0632  2E79               	goto	l133
  1059  0633                     l1152:
  1060                           
  1061                           ;lcd.c: 202:    lcd_gotoxy(0,1);
  1062  0633  01F6               	clrf	lcd_gotoxy@row
  1063  0634  0AF6               	incf	lcd_gotoxy@row,f
  1064  0635  3000               	movlw	0
  1065  0636  120A  118A  2504  120A  118A  	fcall	_lcd_gotoxy
  1066                           
  1067                           ;lcd.c: 203:    break;
  1068  063B  2E79               	goto	l133
  1069  063C                     l1154:
  1070                           
  1071                           ;lcd.c: 205:    lcd_put_byte(0,0x10);
  1072  063C  3010               	movlw	16
  1073  063D  00FA               	movwf	??_lcd_putc
  1074  063E  087A               	movf	??_lcd_putc,w
  1075  063F  00F3               	movwf	lcd_put_byte@b
  1076  0640  3000               	movlw	0
  1077  0641  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1078  0646                     l1156:	
  1079                           ;lcd.c: 206:    while(lcd_busy());
  1080                           
  1081  0646  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1082  064B  3A00               	xorlw	0
  1083  064C  1D03               	skipz
  1084  064D  2E4F               	goto	u541
  1085  064E  2E50               	goto	u540
  1086  064F                     u541:
  1087  064F  2E46               	goto	l1156
  1088  0650                     u540:
  1089  0650  2E79               	goto	l133
  1090  0651                     l1158:
  1091                           
  1092                           ;lcd.c: 210:     {;lcd.c: 211:     lcd_put_byte(1,c);
  1093  0651  087C               	movf	lcd_putc@c,w
  1094  0652  00FA               	movwf	??_lcd_putc
  1095  0653  087A               	movf	??_lcd_putc,w
  1096  0654  00F3               	movwf	lcd_put_byte@b
  1097  0655  3001               	movlw	1
  1098  0656  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1099  065B                     l1160:	
  1100                           ;lcd.c: 212:     while(lcd_busy());
  1101                           
  1102  065B  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1103  0660  3A00               	xorlw	0
  1104  0661  1D03               	skipz
  1105  0662  2E64               	goto	u551
  1106  0663  2E65               	goto	u550
  1107  0664                     u551:
  1108  0664  2E5B               	goto	l1160
  1109  0665                     u550:
  1110  0665  2E79               	goto	l133
  1111  0666                     l1162:
  1112  0666  087C               	movf	lcd_putc@c,w
  1113  0667  00FA               	movwf	??_lcd_putc
  1114  0668  01FB               	clrf	??_lcd_putc+1
  1115                           
  1116                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1117                           ; Switch size 1, requested type "simple"
  1118                           ; Number of cases is 1, Range of values is 0 to 0
  1119                           ; switch strategies available:
  1120                           ; Name         Instructions Cycles
  1121                           ; simple_byte            4     3 (average)
  1122                           ; direct_byte           11     8 (fixed)
  1123                           ; jumptable            260     6 (fixed)
  1124                           ;	Chosen strategy is simple_byte
  1125  0669  087B               	movf	??_lcd_putc+1,w
  1126  066A  3A00               	xorlw	0	; case 0
  1127  066B  1903               	skipnz
  1128  066C  2E6E               	goto	l1326
  1129  066D  2E51               	goto	l1158
  1130  066E                     l1326:
  1131                           
  1132                           ; Switch size 1, requested type "simple"
  1133                           ; Number of cases is 3, Range of values is 8 to 12
  1134                           ; switch strategies available:
  1135                           ; Name         Instructions Cycles
  1136                           ; simple_byte           10     6 (average)
  1137                           ; direct_byte           26    11 (fixed)
  1138                           ; jumptable            263     9 (fixed)
  1139                           ;	Chosen strategy is simple_byte
  1140  066E  087A               	movf	??_lcd_putc,w
  1141  066F  3A08               	xorlw	8	; case 8
  1142  0670  1903               	skipnz
  1143  0671  2E3C               	goto	l1154
  1144  0672  3A02               	xorlw	2	; case 10
  1145  0673  1903               	skipnz
  1146  0674  2E33               	goto	l1152
  1147  0675  3A06               	xorlw	6	; case 12
  1148  0676  1903               	skipnz
  1149  0677  2E20               	goto	l1148
  1150  0678  2E51               	goto	l1158
  1151  0679                     l133:
  1152  0679  0008               	return
  1153  067A                     __end_of_lcd_putc:
  1154                           
  1155                           	psect	text3
  1156  0504                     __ptext3:	
  1157 ;; *************** function _lcd_gotoxy *****************
  1158 ;; Defined at:
  1159 ;;		line 167 in file "lcd.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  col             1    wreg     unsigned char 
  1162 ;;  row             1    6[COMMON] unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  col             1    8[COMMON] unsigned char 
  1165 ;;  address         1    9[COMMON] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0, pclath, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         1       0       0       0       0
  1176 ;;      Locals:         2       0       0       0       0
  1177 ;;      Temps:          1       0       0       0       0
  1178 ;;      Totals:         4       0       0       0       0
  1179 ;;Total ram usage:        4 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; Hardware stack levels required when called: 2
  1182 ;; This function calls:
  1183 ;;		_lcd_busy
  1184 ;;		_lcd_put_byte
  1185 ;; This function is called by:
  1186 ;;		_showContent
  1187 ;;		_lcd_putc
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           
  1192                           ;psect for function _lcd_gotoxy
  1193  0504                     _lcd_gotoxy:
  1194                           
  1195                           ;incstack = 0
  1196                           ; Regs used in _lcd_gotoxy: [wreg+status,2+status,0+pclath+cstack]
  1197                           ;lcd_gotoxy@col stored from wreg
  1198  0504  00F8               	movwf	lcd_gotoxy@col
  1199  0505                     l1122:
  1200                           
  1201                           ;lcd.c: 167: void lcd_gotoxy(unsigned char col, unsigned char row);lcd.c: 168: {;lcd.c: 
      +                          170:  unsigned char address;;lcd.c: 173:  if(row!=0)
  1202  0505  0876               	movf	lcd_gotoxy@row,w
  1203  0506  1903               	btfsc	3,2
  1204  0507  2D09               	goto	u501
  1205  0508  2D0A               	goto	u500
  1206  0509                     u501:
  1207  0509  2D0F               	goto	l1126
  1208  050A                     u500:
  1209  050A                     l1124:
  1210                           
  1211                           ;lcd.c: 174:   address=0x40;
  1212  050A  3040               	movlw	64
  1213  050B  00F7               	movwf	??_lcd_gotoxy
  1214  050C  0877               	movf	??_lcd_gotoxy,w
  1215  050D  00F9               	movwf	lcd_gotoxy@address
  1216  050E  2D10               	goto	l1128
  1217  050F                     l1126:
  1218                           
  1219                           ;lcd.c: 176:   address=0;
  1220  050F  01F9               	clrf	lcd_gotoxy@address
  1221  0510                     l1128:
  1222                           
  1223                           ;lcd.c: 178:  address += col;
  1224  0510  0878               	movf	lcd_gotoxy@col,w
  1225  0511  00F7               	movwf	??_lcd_gotoxy
  1226  0512  0877               	movf	??_lcd_gotoxy,w
  1227  0513  07F9               	addwf	lcd_gotoxy@address,f
  1228  0514                     l1130:
  1229                           
  1230                           ;lcd.c: 180:  lcd_put_byte(0,0x80|address);
  1231  0514  0879               	movf	lcd_gotoxy@address,w
  1232  0515  3880               	iorlw	128
  1233  0516  00F7               	movwf	??_lcd_gotoxy
  1234  0517  0877               	movf	??_lcd_gotoxy,w
  1235  0518  00F3               	movwf	lcd_put_byte@b
  1236  0519  3000               	movlw	0
  1237  051A  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1238  051F                     l1132:	
  1239                           ;lcd.c: 181:  while(lcd_busy());
  1240                           
  1241  051F  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1242  0524  3A00               	xorlw	0
  1243  0525  1D03               	skipz
  1244  0526  2D28               	goto	u511
  1245  0527  2D29               	goto	u510
  1246  0528                     u511:
  1247  0528  2D1F               	goto	l1132
  1248  0529                     u510:
  1249  0529                     l115:
  1250  0529  0008               	return
  1251  052A                     __end_of_lcd_gotoxy:
  1252                           
  1253                           	psect	text4
  1254  04E7                     __ptext4:	
  1255 ;; *************** function _getLengthArr *****************
  1256 ;; Defined at:
  1257 ;;		line 40 in file "newmain.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  character       1    wreg     PTR unsigned char 
  1260 ;;		 -> main@class(12), main@HKTT(12), main@your_live(17), main@your_born(17), 
  1261 ;;		 -> main@MSSV(15), main@your_name(16), 
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  character       1    2[COMMON] PTR unsigned char 
  1264 ;;		 -> main@class(12), main@HKTT(12), main@your_live(17), main@your_born(17), 
  1265 ;;		 -> main@MSSV(15), main@your_name(16), 
  1266 ;;  i               2    3[COMMON] unsigned int 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  2    0[COMMON] unsigned int 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         2       0       0       0       0
  1277 ;;      Locals:         3       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         5       0       0       0       0
  1280 ;;Total ram usage:        5 bytes
  1281 ;; Hardware stack levels used: 2
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_showContent
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           
  1290                           ;psect for function _getLengthArr
  1291  04E7                     _getLengthArr:
  1292                           
  1293                           ;incstack = 0
  1294                           ; Regs used in _getLengthArr: [wreg-fsr0h+status,2+status,0+pclath]
  1295                           ;getLengthArr@character stored from wreg
  1296  04E7  00F2               	movwf	getLengthArr@character
  1297  04E8                     l1134:
  1298                           
  1299                           ;newmain.c: 41:     unsigned int i = 0;
  1300  04E8  01F3               	clrf	getLengthArr@i
  1301  04E9  01F4               	clrf	getLengthArr@i+1
  1302  04EA                     l1136:
  1303                           
  1304                           ;newmain.c: 43:         if(character[i] == '\n')
  1305  04EA  0873               	movf	getLengthArr@i,w
  1306  04EB  0772               	addwf	getLengthArr@character,w
  1307  04EC  0084               	movwf	4
  1308  04ED  120A  118A  2003  120A  118A  	fcall	stringdir
  1309  04F2  3A0A               	xorlw	10
  1310  04F3  1D03               	skipz
  1311  04F4  2CF6               	goto	u521
  1312  04F5  2CF7               	goto	u520
  1313  04F6                     u521:
  1314  04F6  2CF8               	goto	l1140
  1315  04F7                     u520:
  1316  04F7  2CFF               	goto	l1142
  1317  04F8                     l1140:
  1318                           
  1319                           ;newmain.c: 47:         i++;
  1320  04F8  3001               	movlw	1
  1321  04F9  07F3               	addwf	getLengthArr@i,f
  1322  04FA  1803               	skipnc
  1323  04FB  0AF4               	incf	getLengthArr@i+1,f
  1324  04FC  3000               	movlw	0
  1325  04FD  07F4               	addwf	getLengthArr@i+1,f
  1326  04FE  2CEA               	goto	l1136
  1327  04FF                     l1142:
  1328                           
  1329                           ;newmain.c: 49:     return i;
  1330  04FF  0874               	movf	getLengthArr@i+1,w
  1331  0500  00F1               	movwf	?_getLengthArr+1
  1332  0501  0873               	movf	getLengthArr@i,w
  1333  0502  00F0               	movwf	?_getLengthArr
  1334  0503                     l31:
  1335  0503  0008               	return
  1336  0504                     __end_of_getLengthArr:
  1337                           
  1338                           	psect	text5
  1339  0759                     __ptext5:	
  1340 ;; *************** function _lcd_init *****************
  1341 ;; Defined at:
  1342 ;;		line 241 in file "lcd.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  i               1    0        unsigned char 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, pclath, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1356 ;;      Params:         0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0
  1358 ;;      Temps:          2       0       0       0       0
  1359 ;;      Totals:         2       0       0       0       0
  1360 ;;Total ram usage:        2 bytes
  1361 ;; Hardware stack levels used: 1
  1362 ;; Hardware stack levels required when called: 2
  1363 ;; This function calls:
  1364 ;;		_lcd_busy
  1365 ;;		_lcd_put_byte
  1366 ;;		_lcd_put_nibble
  1367 ;; This function is called by:
  1368 ;;		_main
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           
  1373                           ;psect for function _lcd_init
  1374  0759                     _lcd_init:
  1375  0759                     l1206:	
  1376                           ;incstack = 0
  1377                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1378                           
  1379                           
  1380                           ;lcd.c: 244: unsigned char i;;lcd.c: 247:  TRISD3 = 0;
  1381  0759  1683               	bsf	3,5	;RP0=1, select bank1
  1382  075A  1303               	bcf	3,6	;RP1=0, select bank1
  1383  075B  1188               	bcf	8,3	;volatile
  1384                           
  1385                           ;lcd.c: 248:  TRISD1 = 0;
  1386  075C  1088               	bcf	8,1	;volatile
  1387                           
  1388                           ;lcd.c: 249:  TRISD2 = 0;
  1389  075D  1108               	bcf	8,2	;volatile
  1390                           
  1391                           ;lcd.c: 250:  TRISD4 = 0;
  1392  075E  1208               	bcf	8,4	;volatile
  1393                           
  1394                           ;lcd.c: 251:  TRISD5 = 0;
  1395  075F  1288               	bcf	8,5	;volatile
  1396                           
  1397                           ;lcd.c: 252:  TRISD6 = 0;
  1398  0760  1308               	bcf	8,6	;volatile
  1399                           
  1400                           ;lcd.c: 253:  TRISD7 = 0;
  1401  0761  1388               	bcf	8,7	;volatile
  1402  0762                     l1208:
  1403                           
  1404                           ;lcd.c: 255:  _delay((unsigned long)((15)*(4000000/4000.0)));
  1405  0762  3014               	movlw	20
  1406  0763  00F7               	movwf	??_lcd_init+1
  1407  0764  3079               	movlw	121
  1408  0765  00F6               	movwf	??_lcd_init
  1409  0766                     u737:
  1410  0766  0BF6               	decfsz	??_lcd_init,f
  1411  0767  2F66               	goto	u737
  1412  0768  0BF7               	decfsz	??_lcd_init+1,f
  1413  0769  2F66               	goto	u737
  1414  076A  2F6B               	nop2
  1415  076B                     l1210:
  1416                           
  1417                           ;lcd.c: 257:  RD1 = 0;
  1418  076B  1283               	bcf	3,5	;RP0=0, select bank0
  1419  076C  1303               	bcf	3,6	;RP1=0, select bank0
  1420  076D  1088               	bcf	8,1	;volatile
  1421  076E                     l1212:
  1422                           
  1423                           ;lcd.c: 258:  RD2 = 0;
  1424  076E  1108               	bcf	8,2	;volatile
  1425  076F                     l1214:
  1426                           
  1427                           ;lcd.c: 259:  RD3 = 0;
  1428  076F  1188               	bcf	8,3	;volatile
  1429  0770                     l1216:
  1430                           
  1431                           ;lcd.c: 261:  lcd_put_nibble(3);
  1432  0770  3003               	movlw	3
  1433  0771  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1434  0776                     l1218:
  1435                           
  1436                           ;lcd.c: 262:  _delay((unsigned long)((10)*(4000000/4000.0)));
  1437  0776  300D               	movlw	13
  1438  0777  00F7               	movwf	??_lcd_init+1
  1439  0778  30FB               	movlw	251
  1440  0779  00F6               	movwf	??_lcd_init
  1441  077A                     u747:
  1442  077A  0BF6               	decfsz	??_lcd_init,f
  1443  077B  2F7A               	goto	u747
  1444  077C  0BF7               	decfsz	??_lcd_init+1,f
  1445  077D  2F7A               	goto	u747
  1446  077E  2F7F               	nop2
  1447                           
  1448                           ;lcd.c: 263:  lcd_put_nibble(3);
  1449  077F  3003               	movlw	3
  1450  0780  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1451  0785                     l1220:
  1452                           
  1453                           ;lcd.c: 264:  _delay((unsigned long)((10)*(4000000/4000.0)));
  1454  0785  300D               	movlw	13
  1455  0786  00F7               	movwf	??_lcd_init+1
  1456  0787  30FB               	movlw	251
  1457  0788  00F6               	movwf	??_lcd_init
  1458  0789                     u757:
  1459  0789  0BF6               	decfsz	??_lcd_init,f
  1460  078A  2F89               	goto	u757
  1461  078B  0BF7               	decfsz	??_lcd_init+1,f
  1462  078C  2F89               	goto	u757
  1463  078D  2F8E               	nop2
  1464  078E                     l1222:
  1465                           
  1466                           ;lcd.c: 265:  lcd_put_nibble(3);
  1467  078E  3003               	movlw	3
  1468  078F  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1469                           
  1470                           ;lcd.c: 266:  _delay((unsigned long)((10)*(4000000/4000.0)));
  1471  0794  300D               	movlw	13
  1472  0795  00F7               	movwf	??_lcd_init+1
  1473  0796  30FB               	movlw	251
  1474  0797  00F6               	movwf	??_lcd_init
  1475  0798                     u767:
  1476  0798  0BF6               	decfsz	??_lcd_init,f
  1477  0799  2F98               	goto	u767
  1478  079A  0BF7               	decfsz	??_lcd_init+1,f
  1479  079B  2F98               	goto	u767
  1480  079C  2F9D               	nop2
  1481  079D                     l1224:
  1482                           
  1483                           ;lcd.c: 268:  lcd_put_nibble(2);
  1484  079D  3002               	movlw	2
  1485  079E  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1486  07A3                     l1226:	
  1487                           ;lcd.c: 269:  while(lcd_busy());
  1488                           
  1489  07A3  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1490  07A8  3A00               	xorlw	0
  1491  07A9  1D03               	skipz
  1492  07AA  2FAC               	goto	u611
  1493  07AB  2FAD               	goto	u610
  1494  07AC                     u611:
  1495  07AC  2FA3               	goto	l1226
  1496  07AD                     u610:
  1497  07AD                     l1228:
  1498                           
  1499                           ;lcd.c: 271:  lcd_put_byte(0,0b00101100 & 0b00111000);
  1500  07AD  3028               	movlw	40
  1501  07AE  00F6               	movwf	??_lcd_init
  1502  07AF  0876               	movf	??_lcd_init,w
  1503  07B0  00F3               	movwf	lcd_put_byte@b
  1504  07B1  3000               	movlw	0
  1505  07B2  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1506  07B7                     l1230:	
  1507                           ;lcd.c: 272:  while(lcd_busy());
  1508                           
  1509  07B7  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1510  07BC  3A00               	xorlw	0
  1511  07BD  1D03               	skipz
  1512  07BE  2FC0               	goto	u621
  1513  07BF  2FC1               	goto	u620
  1514  07C0                     u621:
  1515  07C0  2FB7               	goto	l1230
  1516  07C1                     u620:
  1517  07C1                     l1232:
  1518                           
  1519                           ;lcd.c: 274:  lcd_put_byte(0,0b00001111 & 0b00001101 & 0b00001110);
  1520  07C1  300C               	movlw	12
  1521  07C2  00F6               	movwf	??_lcd_init
  1522  07C3  0876               	movf	??_lcd_init,w
  1523  07C4  00F3               	movwf	lcd_put_byte@b
  1524  07C5  3000               	movlw	0
  1525  07C6  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1526  07CB                     l1234:	
  1527                           ;lcd.c: 275:  while(lcd_busy());
  1528                           
  1529  07CB  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1530  07D0  3A00               	xorlw	0
  1531  07D1  1D03               	skipz
  1532  07D2  2FD4               	goto	u631
  1533  07D3  2FD5               	goto	u630
  1534  07D4                     u631:
  1535  07D4  2FCB               	goto	l1234
  1536  07D5                     u630:
  1537  07D5                     l1236:
  1538                           
  1539                           ;lcd.c: 277:  lcd_put_byte(0,0x01);
  1540  07D5  01F3               	clrf	lcd_put_byte@b
  1541  07D6  0AF3               	incf	lcd_put_byte@b,f
  1542  07D7  3000               	movlw	0
  1543  07D8  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1544  07DD                     l1238:	
  1545                           ;lcd.c: 278:  while(lcd_busy());
  1546                           
  1547  07DD  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1548  07E2  3A00               	xorlw	0
  1549  07E3  1D03               	skipz
  1550  07E4  2FE6               	goto	u641
  1551  07E5  2FE7               	goto	u640
  1552  07E6                     u641:
  1553  07E6  2FDD               	goto	l1238
  1554  07E7                     u640:
  1555  07E7                     l1240:
  1556                           
  1557                           ;lcd.c: 280:  lcd_put_byte(0,0b00000110);
  1558  07E7  3006               	movlw	6
  1559  07E8  00F6               	movwf	??_lcd_init
  1560  07E9  0876               	movf	??_lcd_init,w
  1561  07EA  00F3               	movwf	lcd_put_byte@b
  1562  07EB  3000               	movlw	0
  1563  07EC  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1564  07F1                     l1242:	
  1565                           ;lcd.c: 281:  while(lcd_busy());
  1566                           
  1567  07F1  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1568  07F6  3A00               	xorlw	0
  1569  07F7  1D03               	skipz
  1570  07F8  2FFA               	goto	u651
  1571  07F9  2FFB               	goto	u650
  1572  07FA                     u651:
  1573  07FA  2FF1               	goto	l1242
  1574  07FB                     u650:
  1575  07FB                     l157:
  1576  07FB  0008               	return
  1577  07FC                     __end_of_lcd_init:
  1578                           
  1579                           	psect	text6
  1580  05D7                     __ptext6:	
  1581 ;; *************** function _addCharSpecial *****************
  1582 ;; Defined at:
  1583 ;;		line 29 in file "newmain.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  character       1    wreg     PTR unsigned char 
  1586 ;;		 -> main@special_HKTT_class(33), main@special_name_born_live(49), 
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  character       1    9[COMMON] PTR unsigned char 
  1589 ;;		 -> main@special_HKTT_class(33), main@special_name_born_live(49), 
  1590 ;;  i               2    7[COMMON] unsigned int 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1600 ;;      Params:         0       0       0       0       0
  1601 ;;      Locals:         3       0       0       0       0
  1602 ;;      Temps:          1       0       0       0       0
  1603 ;;      Totals:         4       0       0       0       0
  1604 ;;Total ram usage:        4 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 2
  1607 ;; This function calls:
  1608 ;;		_lcd_busy
  1609 ;;		_lcd_put_byte
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           
  1616                           ;psect for function _addCharSpecial
  1617  05D7                     _addCharSpecial:
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _addCharSpecial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1621                           ;addCharSpecial@character stored from wreg
  1622  05D7  00F9               	movwf	addCharSpecial@character
  1623  05D8                     l1168:
  1624                           
  1625                           ;newmain.c: 30:     unsigned int i = 0;
  1626  05D8  01F7               	clrf	addCharSpecial@i
  1627  05D9  01F8               	clrf	addCharSpecial@i+1
  1628  05DA                     l1170:
  1629                           
  1630                           ;newmain.c: 31:     lcd_put_byte(0, 0x40);
  1631  05DA  3040               	movlw	64
  1632  05DB  00F6               	movwf	??_addCharSpecial
  1633  05DC  0876               	movf	??_addCharSpecial,w
  1634  05DD  00F3               	movwf	lcd_put_byte@b
  1635  05DE  3000               	movlw	0
  1636  05DF  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1637  05E4                     l1172:	
  1638                           ;newmain.c: 32:     while(lcd_busy());
  1639                           
  1640  05E4  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1641  05E9  3A00               	xorlw	0
  1642  05EA  1D03               	skipz
  1643  05EB  2DED               	goto	u561
  1644  05EC  2DEE               	goto	u560
  1645  05ED                     u561:
  1646  05ED  2DE4               	goto	l1172
  1647  05EE                     u560:
  1648  05EE  2E10               	goto	l1180
  1649  05EF                     l1174:
  1650                           
  1651                           ;newmain.c: 34:         lcd_put_byte(1, character[i]);
  1652  05EF  0877               	movf	addCharSpecial@i,w
  1653  05F0  0779               	addwf	addCharSpecial@character,w
  1654  05F1  0084               	movwf	4
  1655  05F2  120A  118A  2003  120A  118A  	fcall	stringdir
  1656  05F7  00F6               	movwf	??_addCharSpecial
  1657  05F8  0876               	movf	??_addCharSpecial,w
  1658  05F9  00F3               	movwf	lcd_put_byte@b
  1659  05FA  3001               	movlw	1
  1660  05FB  120A  118A  255A  120A  118A  	fcall	_lcd_put_byte
  1661  0600                     l1176:	
  1662                           ;newmain.c: 35:         while(lcd_busy());
  1663                           
  1664  0600  120A  118A  252A  120A  118A  	fcall	_lcd_busy
  1665  0605  3A00               	xorlw	0
  1666  0606  1D03               	skipz
  1667  0607  2E09               	goto	u571
  1668  0608  2E0A               	goto	u570
  1669  0609                     u571:
  1670  0609  2E00               	goto	l1176
  1671  060A                     u570:
  1672  060A                     l1178:
  1673                           
  1674                           ;newmain.c: 36:         i++;
  1675  060A  3001               	movlw	1
  1676  060B  07F7               	addwf	addCharSpecial@i,f
  1677  060C  1803               	skipnc
  1678  060D  0AF8               	incf	addCharSpecial@i+1,f
  1679  060E  3000               	movlw	0
  1680  060F  07F8               	addwf	addCharSpecial@i+1,f
  1681  0610                     l1180:
  1682                           
  1683                           ;newmain.c: 33:     while(character[i] != 0x99) {
  1684  0610  0877               	movf	addCharSpecial@i,w
  1685  0611  0779               	addwf	addCharSpecial@character,w
  1686  0612  0084               	movwf	4
  1687  0613  120A  118A  2003  120A  118A  	fcall	stringdir
  1688  0618  3A99               	xorlw	153
  1689  0619  1D03               	skipz
  1690  061A  2E1C               	goto	u581
  1691  061B  2E1D               	goto	u580
  1692  061C                     u581:
  1693  061C  2DEF               	goto	l1174
  1694  061D                     u580:
  1695  061D                     l24:
  1696  061D  0008               	return
  1697  061E                     __end_of_addCharSpecial:
  1698                           
  1699                           	psect	text7
  1700  055A                     __ptext7:	
  1701 ;; *************** function _lcd_put_byte *****************
  1702 ;; Defined at:
  1703 ;;		line 134 in file "lcd.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  rs              1    wreg     unsigned char 
  1706 ;;  b               1    3[COMMON] unsigned char 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  rs              1    5[COMMON] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, pclath, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         1       0       0       0       0
  1719 ;;      Locals:         1       0       0       0       0
  1720 ;;      Temps:          1       0       0       0       0
  1721 ;;      Totals:         3       0       0       0       0
  1722 ;;Total ram usage:        3 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; Hardware stack levels required when called: 1
  1725 ;; This function calls:
  1726 ;;		_lcd_put_nibble
  1727 ;; This function is called by:
  1728 ;;		_addCharSpecial
  1729 ;;		_lcd_gotoxy
  1730 ;;		_lcd_putc
  1731 ;;		_lcd_init
  1732 ;;		_lcd_ShiftLeft
  1733 ;;		_lcd_ShiftRight
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           
  1738                           ;psect for function _lcd_put_byte
  1739  055A                     _lcd_put_byte:
  1740                           
  1741                           ;incstack = 0
  1742                           ; Regs used in _lcd_put_byte: [wreg+status,2+status,0+pclath+cstack]
  1743                           ;lcd_put_byte@rs stored from wreg
  1744  055A  00F5               	movwf	lcd_put_byte@rs
  1745  055B                     l1084:
  1746                           
  1747                           ;lcd.c: 134: void lcd_put_byte(unsigned char rs, unsigned char b);lcd.c: 135: {;lcd.c: 1
      +                          39:  TRISD4 = 0;
  1748  055B  1683               	bsf	3,5	;RP0=1, select bank1
  1749  055C  1303               	bcf	3,6	;RP1=0, select bank1
  1750  055D  1208               	bcf	8,4	;volatile
  1751                           
  1752                           ;lcd.c: 140:  TRISD5 = 0;
  1753  055E  1288               	bcf	8,5	;volatile
  1754                           
  1755                           ;lcd.c: 141:  TRISD6 = 0;
  1756  055F  1308               	bcf	8,6	;volatile
  1757                           
  1758                           ;lcd.c: 142:  TRISD7 = 0;
  1759  0560  1388               	bcf	8,7	;volatile
  1760  0561                     l1086:
  1761                           
  1762                           ;lcd.c: 144:  if(rs)
  1763  0561  0875               	movf	lcd_put_byte@rs,w
  1764  0562  1903               	btfsc	3,2
  1765  0563  2D65               	goto	u481
  1766  0564  2D66               	goto	u480
  1767  0565                     u481:
  1768  0565  2D6A               	goto	l105
  1769  0566                     u480:
  1770  0566                     l1088:
  1771                           
  1772                           ;lcd.c: 145:   RD1 = 1;
  1773  0566  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0567  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0568  1488               	bsf	8,1	;volatile
  1776  0569  2D6D               	goto	l1090
  1777  056A                     l105:	
  1778                           ;lcd.c: 146:  else
  1779                           
  1780                           
  1781                           ;lcd.c: 147:   RD1 = 0;
  1782  056A  1283               	bcf	3,5	;RP0=0, select bank0
  1783  056B  1303               	bcf	3,6	;RP1=0, select bank0
  1784  056C  1088               	bcf	8,1	;volatile
  1785  056D                     l1090:
  1786                           
  1787                           ;lcd.c: 148:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  1788  056D  3006               	movlw	6
  1789  056E  00F4               	movwf	??_lcd_put_byte
  1790  056F                     u777:
  1791  056F  0BF4               	decfsz	??_lcd_put_byte,f
  1792  0570  2D6F               	goto	u777
  1793  0571  0000               	nop
  1794  0572                     l1092:
  1795                           
  1796                           ;lcd.c: 150:  RD2 = 0;
  1797  0572  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0573  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0574  1108               	bcf	8,2	;volatile
  1800                           
  1801                           ;lcd.c: 151:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  1802  0575  3006               	movlw	6
  1803  0576  00F4               	movwf	??_lcd_put_byte
  1804  0577                     u787:
  1805  0577  0BF4               	decfsz	??_lcd_put_byte,f
  1806  0578  2D77               	goto	u787
  1807  0579  0000               	nop
  1808  057A                     l1094:
  1809                           
  1810                           ;lcd.c: 153:  RD3 = 0;
  1811  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1812  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1813  057C  1188               	bcf	8,3	;volatile
  1814  057D                     l1096:
  1815                           
  1816                           ;lcd.c: 155:  lcd_put_nibble(b >> 4);
  1817  057D  0873               	movf	lcd_put_byte@b,w
  1818  057E  00F4               	movwf	??_lcd_put_byte
  1819  057F  3004               	movlw	4
  1820  0580                     u495:
  1821  0580  1003               	clrc
  1822  0581  0CF4               	rrf	??_lcd_put_byte,f
  1823  0582  3EFF               	addlw	-1
  1824  0583  1D03               	skipz
  1825  0584  2D80               	goto	u495
  1826  0585  0874               	movf	??_lcd_put_byte,w
  1827  0586  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1828  058B                     l1098:
  1829                           
  1830                           ;lcd.c: 157:  lcd_put_nibble(b & 0xf);
  1831  058B  0873               	movf	lcd_put_byte@b,w
  1832  058C  390F               	andlw	15
  1833  058D  120A  118A  2593  120A  118A  	fcall	_lcd_put_nibble
  1834  0592                     l107:
  1835  0592  0008               	return
  1836  0593                     __end_of_lcd_put_byte:
  1837                           
  1838                           	psect	text8
  1839  0593                     __ptext8:	
  1840 ;; *************** function _lcd_put_nibble *****************
  1841 ;; Defined at:
  1842 ;;		line 103 in file "lcd.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  b               1    wreg     unsigned char 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  b               1    1[COMMON] unsigned char 
  1847 ;;  temp            1    2[COMMON] struct _BYTE_VAL
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       0       0       0       0
  1858 ;;      Locals:         2       0       0       0       0
  1859 ;;      Temps:          1       0       0       0       0
  1860 ;;      Totals:         3       0       0       0       0
  1861 ;;Total ram usage:        3 bytes
  1862 ;; Hardware stack levels used: 1
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_lcd_put_byte
  1867 ;;		_lcd_init
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _lcd_put_nibble
  1873  0593                     _lcd_put_nibble:
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in _lcd_put_nibble: [wreg]
  1877                           ;lcd_put_nibble@b stored from wreg
  1878  0593  00F1               	movwf	lcd_put_nibble@b
  1879  0594                     l1068:
  1880                           
  1881                           ;lcd.c: 103: void lcd_put_nibble(unsigned char b);lcd.c: 104: {;lcd.c: 106:  BYTE_VAL te
      +                          mp;;lcd.c: 109:  TRISD4 = 0;
  1882  0594  1683               	bsf	3,5	;RP0=1, select bank1
  1883  0595  1303               	bcf	3,6	;RP1=0, select bank1
  1884  0596  1208               	bcf	8,4	;volatile
  1885                           
  1886                           ;lcd.c: 110:  TRISD5 = 0;
  1887  0597  1288               	bcf	8,5	;volatile
  1888                           
  1889                           ;lcd.c: 111:  TRISD6 = 0;
  1890  0598  1308               	bcf	8,6	;volatile
  1891                           
  1892                           ;lcd.c: 112:  TRISD7 = 0;
  1893  0599  1388               	bcf	8,7	;volatile
  1894  059A                     l1070:
  1895                           
  1896                           ;lcd.c: 114:  temp.Val = b;
  1897  059A  0871               	movf	lcd_put_nibble@b,w
  1898  059B  00F0               	movwf	??_lcd_put_nibble
  1899  059C  0870               	movf	??_lcd_put_nibble,w
  1900  059D  00F2               	movwf	lcd_put_nibble@temp
  1901  059E                     l1072:
  1902                           
  1903                           ;lcd.c: 116:  RD4 = temp.bits.b0;
  1904  059E  1872               	btfsc	lcd_put_nibble@temp,0
  1905  059F  2DA1               	goto	u401
  1906  05A0  2DA5               	goto	u400
  1907  05A1                     u401:
  1908  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1909  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1910  05A3  1608               	bsf	8,4	;volatile
  1911  05A4  2DA8               	goto	u414
  1912  05A5                     u400:
  1913  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1914  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1915  05A7  1208               	bcf	8,4	;volatile
  1916  05A8                     u414:
  1917  05A8                     l1074:
  1918                           
  1919                           ;lcd.c: 117:  RD5 = temp.bits.b1;
  1920  05A8  18F2               	btfsc	lcd_put_nibble@temp,1
  1921  05A9  2DAB               	goto	u421
  1922  05AA  2DAF               	goto	u420
  1923  05AB                     u421:
  1924  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  1925  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  1926  05AD  1688               	bsf	8,5	;volatile
  1927  05AE  2DB2               	goto	u434
  1928  05AF                     u420:
  1929  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1930  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1931  05B1  1288               	bcf	8,5	;volatile
  1932  05B2                     u434:
  1933  05B2                     l1076:
  1934                           
  1935                           ;lcd.c: 118:  RD6 = temp.bits.b2;
  1936  05B2  1972               	btfsc	lcd_put_nibble@temp,2
  1937  05B3  2DB5               	goto	u441
  1938  05B4  2DB9               	goto	u440
  1939  05B5                     u441:
  1940  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1941  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1942  05B7  1708               	bsf	8,6	;volatile
  1943  05B8  2DBC               	goto	u454
  1944  05B9                     u440:
  1945  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1946  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1947  05BB  1308               	bcf	8,6	;volatile
  1948  05BC                     u454:
  1949  05BC                     l1078:
  1950                           
  1951                           ;lcd.c: 119:  RD7 = temp.bits.b3;
  1952  05BC  19F2               	btfsc	lcd_put_nibble@temp,3
  1953  05BD  2DBF               	goto	u461
  1954  05BE  2DC3               	goto	u460
  1955  05BF                     u461:
  1956  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1957  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1958  05C1  1788               	bsf	8,7	;volatile
  1959  05C2  2DC6               	goto	u474
  1960  05C3                     u460:
  1961  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1962  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1963  05C5  1388               	bcf	8,7	;volatile
  1964  05C6                     u474:
  1965                           
  1966                           ;lcd.c: 121:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  1967  05C6  3006               	movlw	6
  1968  05C7  00F0               	movwf	??_lcd_put_nibble
  1969  05C8                     u797:
  1970  05C8  0BF0               	decfsz	??_lcd_put_nibble,f
  1971  05C9  2DC8               	goto	u797
  1972  05CA  0000               	nop
  1973  05CB                     l1080:
  1974                           
  1975                           ;lcd.c: 122:  RD3 = 1;
  1976  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1977  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  1978  05CD  1588               	bsf	8,3	;volatile
  1979                           
  1980                           ;lcd.c: 123:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  1981  05CE  3006               	movlw	6
  1982  05CF  00F0               	movwf	??_lcd_put_nibble
  1983  05D0                     u807:
  1984  05D0  0BF0               	decfsz	??_lcd_put_nibble,f
  1985  05D1  2DD0               	goto	u807
  1986  05D2  0000               	nop
  1987  05D3                     l1082:
  1988                           
  1989                           ;lcd.c: 124:  RD3 = 0;
  1990  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1991  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1992  05D5  1188               	bcf	8,3	;volatile
  1993  05D6                     l102:
  1994  05D6  0008               	return
  1995  05D7                     __end_of_lcd_put_nibble:
  1996                           
  1997                           	psect	text9
  1998  052A                     __ptext9:	
  1999 ;; *************** function _lcd_busy *****************
  2000 ;; Defined at:
  2001 ;;		line 18 in file "lcd.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  busy            1    1[COMMON] unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      unsigned char 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2015 ;;      Params:         0       0       0       0       0
  2016 ;;      Locals:         1       0       0       0       0
  2017 ;;      Temps:          1       0       0       0       0
  2018 ;;      Totals:         2       0       0       0       0
  2019 ;;Total ram usage:        2 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_addCharSpecial
  2025 ;;		_lcd_gotoxy
  2026 ;;		_lcd_putc
  2027 ;;		_lcd_init
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           
  2032                           ;psect for function _lcd_busy
  2033  052A                     _lcd_busy:
  2034  052A                     l1100:	
  2035                           ;incstack = 0
  2036                           ; Regs used in _lcd_busy: [wreg+status,2]
  2037                           
  2038                           
  2039                           ;lcd.c: 21: unsigned char busy;;lcd.c: 24:  TRISD4 = 1;
  2040  052A  1683               	bsf	3,5	;RP0=1, select bank1
  2041  052B  1303               	bcf	3,6	;RP1=0, select bank1
  2042  052C  1608               	bsf	8,4	;volatile
  2043                           
  2044                           ;lcd.c: 25:  TRISD5 = 1;
  2045  052D  1688               	bsf	8,5	;volatile
  2046                           
  2047                           ;lcd.c: 26:  TRISD6 = 1;
  2048  052E  1708               	bsf	8,6	;volatile
  2049                           
  2050                           ;lcd.c: 27:  TRISD7 = 1;
  2051  052F  1788               	bsf	8,7	;volatile
  2052                           
  2053                           ;lcd.c: 29:  RD2 = 1;
  2054  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0532  1508               	bsf	8,2	;volatile
  2057                           
  2058                           ;lcd.c: 30:  RD1 = 0;
  2059  0533  1088               	bcf	8,1	;volatile
  2060  0534                     l1102:
  2061                           
  2062                           ;lcd.c: 31:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  2063  0534  3006               	movlw	6
  2064  0535  00F0               	movwf	??_lcd_busy
  2065  0536                     u817:
  2066  0536  0BF0               	decfsz	??_lcd_busy,f
  2067  0537  2D36               	goto	u817
  2068  0538  0000               	nop
  2069  0539                     l1104:
  2070                           
  2071                           ;lcd.c: 32:  RD3 = 1;
  2072  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2073  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2074  053B  1588               	bsf	8,3	;volatile
  2075                           
  2076                           ;lcd.c: 33:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  2077  053C  3006               	movlw	6
  2078  053D  00F0               	movwf	??_lcd_busy
  2079  053E                     u827:
  2080  053E  0BF0               	decfsz	??_lcd_busy,f
  2081  053F  2D3E               	goto	u827
  2082  0540  0000               	nop
  2083  0541                     l1106:
  2084                           
  2085                           ;lcd.c: 35:  busy = RD7;
  2086  0541  3000               	movlw	0
  2087  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0544  1B88               	btfsc	8,7	;volatile
  2090  0545  3001               	movlw	1
  2091  0546  00F1               	movwf	lcd_busy@busy
  2092  0547                     l1108:
  2093                           
  2094                           ;lcd.c: 37:  RD3 = 0;
  2095  0547  1188               	bcf	8,3	;volatile
  2096  0548                     l1110:
  2097                           
  2098                           ;lcd.c: 38:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  2099  0548  3006               	movlw	6
  2100  0549  00F0               	movwf	??_lcd_busy
  2101  054A                     u837:
  2102  054A  0BF0               	decfsz	??_lcd_busy,f
  2103  054B  2D4A               	goto	u837
  2104  054C  0000               	nop
  2105  054D                     l1112:
  2106                           
  2107                           ;lcd.c: 39:  RD3 = 1;
  2108  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2109  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2110  054F  1588               	bsf	8,3	;volatile
  2111  0550                     l1114:
  2112                           
  2113                           ;lcd.c: 40:  _delay((unsigned long)((20)*(4000000/4000000.0)));
  2114  0550  3006               	movlw	6
  2115  0551  00F0               	movwf	??_lcd_busy
  2116  0552                     u847:
  2117  0552  0BF0               	decfsz	??_lcd_busy,f
  2118  0553  2D52               	goto	u847
  2119  0554  0000               	nop
  2120  0555                     l1116:
  2121                           
  2122                           ;lcd.c: 41:  RD3 = 0;
  2123  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0557  1188               	bcf	8,3	;volatile
  2126  0558                     l1118:
  2127                           
  2128                           ;lcd.c: 43:  return busy;
  2129  0558  0871               	movf	lcd_busy@busy,w
  2130  0559                     l94:
  2131  0559  0008               	return
  2132  055A                     __end_of_lcd_busy:
  2133  007E                     btemp	set	126	;btemp
  2134  007E                     wtemp0	set	126
  2135                           
  2136                           	psect	config
  2137                           
  2138                           ;Config register CONFIG1 @ 0x2007
  2139                           ;	Oscillator Selection bits
  2140                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2141                           ;	Watchdog Timer Enable bit
  2142                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2143                           ;	Power-up Timer Enable bit
  2144                           ;	PWRTE = OFF, PWRT disabled
  2145                           ;	RE3/MCLR pin function select bit
  2146                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  2147                           ;	Code Protection bit
  2148                           ;	CP = OFF, Program memory code protection is disabled
  2149                           ;	Data Code Protection bit
  2150                           ;	CPD = OFF, Data memory code protection is disabled
  2151                           ;	Brown Out Reset Selection bits
  2152                           ;	BOREN = OFF, BOR disabled
  2153                           ;	Internal External Switchover bit
  2154                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2155                           ;	Fail-Safe Clock Monitor Enabled bit
  2156                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2157                           ;	Low Voltage Programming Enable bit
  2158                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2159                           ;	In-Circuit Debugger Mode bit
  2160                           ;	DEBUG = 0x1, unprogrammed default
  2161  2007                     	org	8199
  2162  2007  20F2               	dw	8434
  2163                           
  2164                           ;Config register CONFIG2 @ 0x2008
  2165                           ;	Brown-out Reset Selection bit
  2166                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2167                           ;	Flash Program Memory Self Write Enable bits
  2168                           ;	WRT = OFF, Write protection off
  2169  2008                     	org	8200
  2170  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    171
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    showContent@character_second	PTR unsigned char  size(1) Largest target is 17
		 -> main@class(CODE[12]), main@your_live(CODE[17]), main@MSSV(CODE[15]), 

    showContent@character_firt	PTR unsigned char  size(1) Largest target is 17
		 -> main@HKTT(CODE[12]), main@your_born(CODE[17]), main@your_name(CODE[16]), 

    getLengthArr@character	PTR unsigned char  size(1) Largest target is 17
		 -> main@class(CODE[12]), main@HKTT(CODE[12]), main@your_live(CODE[17]), main@your_born(CODE[17]), 
		 -> main@MSSV(CODE[15]), main@your_name(CODE[16]), 

    addCharSpecial@character	PTR unsigned char  size(1) Largest target is 49
		 -> main@special_HKTT_class(CODE[33]), main@special_name_born_live(CODE[49]), 


Critical Paths under _main in COMMON

    _main->_showContent
    _showContent->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_put_byte
    _lcd_init->_lcd_put_byte
    _addCharSpecial->_lcd_put_byte
    _lcd_put_byte->_lcd_put_nibble

Critical Paths under _main in BANK0

    _main->_showContent

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    7154
                                              7 BANK0      5     5      0
                     _addCharSpecial
                           _lcd_init
                        _showContent
 ---------------------------------------------------------------------------------
 (1) _showContent                                          8     7      1    4661
                                             13 COMMON     1     0      1
                                              0 BANK0      7     7      0
                       _getLengthArr
                         _lcd_gotoxy
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             3     3      0    2565
                                             10 COMMON     3     3      0
                           _lcd_busy
                         _lcd_gotoxy
                       _lcd_put_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           4     3      1    1409
                                              6 COMMON     4     3      1
                           _lcd_busy
                       _lcd_put_byte
 ---------------------------------------------------------------------------------
 (3) _getLengthArr                                         5     3      2     134
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0    1223
                                              6 COMMON     2     2      0
                           _lcd_busy
                       _lcd_put_byte
                     _lcd_put_nibble
 ---------------------------------------------------------------------------------
 (1) _addCharSpecial                                       4     4      0    1268
                                              6 COMMON     4     4      0
                           _lcd_busy
                       _lcd_put_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_put_byte                                         3     2      1    1089
                                              3 COMMON     3     2      1
                     _lcd_put_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_put_nibble                                       3     3      0     111
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _lcd_busy                                             2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _addCharSpecial
     _lcd_busy
     _lcd_put_byte
       _lcd_put_nibble
   _lcd_init
     _lcd_busy
     _lcd_put_byte
     _lcd_put_nibble
   _showContent
     _getLengthArr
     _lcd_gotoxy
       _lcd_busy
       _lcd_put_byte
     _lcd_putc
       _lcd_busy
       _lcd_gotoxy
       _lcd_put_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 02 18:35:41 2021

                                 pc 0002                                  l31 0503  
                                l24 061D                                  l40 0758  
                                l61 06DD                                  l94 0559  
            __end_of_lcd_put_nibble 05D7                                  fsr 0004  
                   ?_addCharSpecial 0070                       ?_lcd_put_byte 0073  
                               l102 05D6                                 l105 056A  
                               l107 0592                                 l115 0529  
                               l133 0679                                 l157 07FB  
                               _RD1 0041                                 _RD2 0042  
                               _RD3 0043                                 _RD4 0044  
                               _RD5 0045                                 _RD6 0046  
                               _RD7 0047                                 u400 05A5  
                               u401 05A1                                 u420 05AF  
                               u500 050A                                 u421 05AB  
                               u501 0509                                 u414 05A8  
                               u510 0529                                 u511 0528  
                               u440 05B9                                 u520 04F7  
                               u600 0758                                 u441 05B5  
                               u521 04F6                                 u601 0757  
                               u434 05B2                                 u610 07AD  
                               u530 0632                                 u611 07AC  
                               u531 0631                                 u460 05C3  
                               u620 07C1                                 u540 0650  
                               u461 05BF                                 u621 07C0  
                               u541 064F                                 u605 0754  
                               u454 05BC                                 u630 07D5  
                               u550 0665                                 u631 07D4  
                               u551 0664                                 u480 0566  
                               u560 05EE                                 u640 07E7  
                               u481 0565                                 u561 05ED  
                               u641 07E6                                 u474 05C6  
                               u570 060A                                 u650 07FB  
                               u571 0609                                 u651 07FA  
                               u707 069D                                 u580 061D  
                               u581 061C                                 u717 06B7  
                               u590 0720                                 u807 05D0  
                               u495 0580                                 u591 071F  
                               u727 06D7                                 u817 0536  
                               u737 0766                                 u827 053E  
                               u747 077A                                 u595 071C  
                               u837 054A                                 u757 0789  
                               u847 0552                                 u767 0798  
                               u777 056F                                 u787 0577  
                               u797 05C8                                 fsr0 0004  
                              l1100 052A                                l1110 0548  
                              l1102 0534                                l1112 054D  
                              l1104 0539                                l1200 0739  
                              l1114 0550                                l1106 0541  
                              l1210 076B                                l1130 0514  
                              l1122 0505                                l1202 0746  
                              l1116 0555                                l1108 0547  
                              l1220 0785                                l1212 076E  
                              l1140 04F8                                l1132 051F  
                              l1124 050A                                l1204 074E  
                              l1118 0558                                l1070 059A  
                              l1230 07B7                                l1222 078E  
                              l1214 076F                                l1206 0759  
                              l1142 04FF                                l1134 04E8  
                              l1126 050F                                l1150 0628  
                              l1080 05CB                                l1072 059E  
                              l1240 07E7                                l1232 07C1  
                              l1224 079D                                l1216 0770  
                              l1208 0762                                l1136 04EA  
                              l1128 0510                                l1160 065B  
                              l1152 0633                                l1082 05D3  
                              l1074 05A8                                l1090 056D  
                              l1170 05DA                                l1242 07F1  
                              l1234 07CB                                l1226 07A3  
                              l1218 0776                                l1154 063C  
                              l1162 0666                                l1146 061F  
                              l1250 067E                                l1076 05B2  
                              l1068 0594                                l1092 0572  
                              l1084 055B                                l1180 0610  
                              l1172 05E4                                l1236 07D5  
                              l1228 07AD                                l1156 0646  
                              l1148 0620                                l1260 06AF  
                              l1252 0683                                l1078 05BC  
                              l1094 057A                                l1086 0561  
                              l1174 05EF                                l1238 07DD  
                              l1326 066E                                l1158 0651  
                              l1190 070E                                l1182 06E3  
                              l1262 06BD                                l1254 0689  
                              l1096 057D                                l1088 0566  
                              l1176 0600                                l1168 05D8  
                              l1192 0716                                l1184 06F5  
                              l1264 06C3                                l1256 0695  
                              l1248 067A                                l1098 058B  
                              l1178 060A                                l1194 0720  
                              l1186 06FC                                l1266 06CF  
                              l1258 06A3                                l1196 072C  
                              l1188 0701                                l1198 0734  
                              _main 067A                        lcd_busy@busy 0071  
                              btemp 007E                                start 0000  
                   ?_lcd_put_nibble 0070                      ??_lcd_put_byte 0074  
                             ?_main 0070               getLengthArr@character 0072  
                             pclath 000A                               status 0003  
                             wtemp0 007E                     __initialization 07FC  
              __end_of_getLengthArr 0504                        __end_of_main 06E0  
                     lcd_gotoxy@col 0078                       lcd_gotoxy@row 0076  
                lcd_put_nibble@temp 0072                              ??_main 0027  
                            _TRISD1 0441                              _TRISD2 0442  
                            _TRISD3 0443                              _TRISD4 0444  
                            _TRISD5 0445                              _TRISD6 0446  
                            _TRISD7 0447                    __end_of_lcd_busy 055A  
                  __end_of_lcd_init 07FC                    __end_of_lcd_putc 067A  
                      ?_showContent 007D                       lcd_put_byte@b 0073  
                  __end_ofmain@HKTT 00B4                    __end_ofmain@MSSV 009C  
           __end_of__initialization 07FC                __end_of_lcd_put_byte 0593  
                  ??_addCharSpecial 0076                      __pcstackCOMMON 0070  
                     main@your_born 006C                       main@your_name 007D  
                     main@your_live 005B                   lcd_gotoxy@address 0079  
             __size_of_getLengthArr 001D                    ??_lcd_put_nibble 0070  
                        __pmaintext 067A                          _lcd_gotoxy 0504  
         showContent@character_firt 0024                        _getLengthArr 04E7  
                         ?_lcd_busy 0070                           ?_lcd_init 0070  
                         ?_lcd_putc 0070                          __stringtab 0003  
           addCharSpecial@character 0079                             __ptext1 06E0  
                           __ptext2 061E                             __ptext3 0504  
                           __ptext4 04E7                             __ptext5 0759  
                           __ptext6 05D7                             __ptext7 055A  
                           __ptext8 0593                             __ptext9 052A  
              __size_of_showContent 0079               __size_of_lcd_put_byte 0039  
                        ??_lcd_busy 0070                          ??_lcd_init 0076  
                        ??_lcd_putc 007A                end_of_initialization 07FC  
                    lcd_put_byte@rs 0075              main@special_HKTT_class 003A  
                 __end_ofmain@class 00A8                        _lcd_put_byte 055A  
                       ?_lcd_gotoxy 0076                          main@length 002A  
               start_initialization 07FC                 __size_of_lcd_gotoxy 0026  
                         ___latbits 0002                       __pcstackBANK0 0020  
                   addCharSpecial@i 0077                   __size_of_lcd_busy 0030  
                 __size_of_lcd_init 00A3                   __size_of_lcd_putc 005C  
       showContent@character_second 007D                           __pstrings 0003  
           __size_of_addCharSpecial 0047                       ??_showContent 007E  
                       __stringbase 0008             __size_of_lcd_put_nibble 0044  
                         main@class 009C                       getLengthArr@i 0073  
                         lcd_putc@c 007C                        ??_lcd_gotoxy 0077  
    __end_ofmain@special_HKTT_class 005B               __end_ofmain@your_born 007D  
             __end_ofmain@your_name 008D               __end_ofmain@your_live 006C  
                __end_of_lcd_gotoxy 052A                  __end_of__stringtab 0009  
               __end_of_showContent 0759                            _lcd_busy 052A  
                          _lcd_init 0759                            _lcd_putc 061E  
                     __size_of_main 0066                            main@HKTT 00A8  
                          main@MSSV 008D                      _addCharSpecial 05D7  
               showContent@length_1 0020                 showContent@length_2 0022  
                   lcd_put_nibble@b 0071  __end_ofmain@special_name_born_live 003A  
        main@special_name_born_live 0009                       ?_getLengthArr 0070  
                         stringcode 0003                        showContent@i 0025  
            __end_of_addCharSpecial 061E                         _showContent 06E0  
                    _lcd_put_nibble 0593                            stringdir 0003  
                          stringtab 0003                      ??_getLengthArr 0072  
